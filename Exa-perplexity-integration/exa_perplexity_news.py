"""
Exa + Perplexity News Analyzer (Minimal Version)
===============================================
Simple news search and AI analysis in ~50 lines of code
Uses Exa's regular search API + Perplexity AI
"""

import os
import requests
from datetime import datetime
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def search_news(topic, count=5):
    """Search for news using Exa API"""
    headers = {'X-API-Key': os.getenv('EXA_API_KEY')}
    
    response = requests.post('https://api.exa.ai/search', 
        headers=headers,
        json={
            "query": f"{topic} news",
            "type": "neural",
            "useAutoprompt": True,
            "numResults": count,
            "contents": {"text": True},
            "includeDomains": ["techcrunch.com", "reuters.com", "bloomberg.com"]
        })
    
    return response.json().get('results', [])

def analyze_with_perplexity(articles):
    """Analyze articles with Perplexity AI"""
    news_text = "\n".join([f"- {article['title']}: {article['text'][:200]}..." 
                          for article in articles])
    
    headers = {"Authorization": f"Bearer {os.getenv('PERPLEXITY_API_KEY')}"}
    
    response = requests.post('https://api.perplexity.ai/chat/completions',
        headers=headers,
        json={
            "model": "llama-3.1-sonar-small-128k-online",
            "messages": [{"role": "user", "content": f"""
Analyze these news articles and provide:
1. Key trends
2. Main insights
3. Future implications

Articles:
{news_text}
"""}],
            "temperature": 0.3
        })
    
    return response.json()['choices'][0]['message']['content']

def save_to_markdown(topic, articles, analysis):
    """Save the news analysis to a markdown file"""
    content = f"""# News Analysis: {topic.title()}

**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üì∞ Articles Found

"""
    
    for i, article in enumerate(articles, 1):
        content += f"### {i}. {article['title']}\n"
        content += f"**URL:** {article['url']}\n\n"
        content += f"{article['text'][:300]}...\n\n"
        content += "---\n\n"
    
    content += f"""## ü§ñ AI Analysis

{analysis}

---
*Generated by Exa + Perplexity News Analyzer*
"""
    
    with open('news.md', 'w', encoding='utf-8') as f:
        f.write(content)

def main():
    """Main function"""
    topic = input("Enter news topic: ") or "AI developments"
    
    print(f"\nüîç Searching for: {topic}")
    articles = search_news(topic)
    
    if not articles:
        print("‚ùå No articles found")
        return
    
    print(f"üì∞ Found {len(articles)} articles")
    for i, article in enumerate(articles, 1):
        print(f"{i}. {article['title']}")
        print(f"   {article['url']}\n")
    
    print("ü§ñ Analyzing with Perplexity AI...")
    analysis = analyze_with_perplexity(articles)
    
    print("\n" + "="*60)
    print("AI ANALYSIS")
    print("="*60)
    print(analysis)
    
    # Save to markdown file
    save_to_markdown(topic, articles, analysis)
    print(f"\nüíæ Report saved to: news.md")

if __name__ == "__main__":
    main() 